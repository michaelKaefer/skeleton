# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    supported_locales: en|de
    mail_from_name: '%env(MAIL_FROM_NAME)%'
    mail_from_address: '%env(MAIL_FROM_ADDRESS)%'
    relative_path_to_public_uploads_directory: 'uploads'
    uploads_url: '%env(URL)%/%relative_path_to_public_uploads_directory%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $defaultLocale: '%kernel.default_locale%'
            $supportedLocales: '%supported_locales%'
            $mailFromName: '%mail_from_name%'
            $mailFromAddress: '%mail_from_address%'
            $publicUploadsFilesystem: '@oneup_flysystem.public_uploads_filesystem'
            $privateUploadsFilesystem: '@oneup_flysystem.private_uploads_filesystem'
            $uploadsUrl: '%uploads_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Create an alias to the existing service assets.context so that we can type hint RequestStackContext when needed
    Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'